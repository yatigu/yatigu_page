import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React from 'react';
import PropTypes from 'prop-types';
import clsx from 'clsx';
import { fade, withStyles } from '@material-ui/core/styles';
import ButtonBase from '@material-ui/core/ButtonBase';
import FirstPageIcon from '../internal/svg-icons/FirstPage';
import LastPageIcon from '../internal/svg-icons/LastPage';
import NavigateBeforeIcon from '../internal/svg-icons/NavigateBefore';
import NavigateNextIcon from '../internal/svg-icons/NavigateNext';
import { capitalize } from '@material-ui/core/utils';
export var styles = function styles(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      fontSize: theme.typography.pxToRem(14),
      borderRadius: '50%',
      width: 32,
      height: 32,
      margin: '0 3px',
      color: theme.palette.text.primary,
      transition: theme.transitions.create('background-color', {
        duration: theme.transitions.duration.short
      }),
      '&:hover, &:focus': {
        backgroundColor: theme.palette.action.hover,
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: 'transparent'
        }
      },
      '&$selected': {
        backgroundColor: theme.palette.action.selected,
        '&:hover, &:focus': {
          backgroundColor: 'rgba(0, 0, 0, 0.12)'
        },
        '&$disabled': {
          backgroundColor: theme.palette.action.disabledBackground
        }
      },
      '&$disabled': {
        color: theme.palette.action.disabled,
        backgroundColor: 'transparent',
        pointerEvents: 'none'
      },
      '&$sizeSmall': {
        width: 24,
        height: 24,
        margin: '0 2px',
        fontSize: theme.typography.pxToRem(13)
      },
      '&$sizeLarge': {
        width: 40,
        height: 40,
        margin: '0 4px',
        fontSize: theme.typography.pxToRem(15)
      }
    },

    /* Styles applied to the button element if `outlined="true"`. */
    outlined: {
      border: "1px solid ".concat(theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'),
      '&:hover, &:focus': {
        backgroundColor: theme.palette.action.hover
      },
      '&$disabled': {
        color: theme.palette.action.disabled,
        backgroundColor: 'rgba(0, 0, 0, 0.03)',
        border: "1px solid ".concat(theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.13)' : 'rgba(255, 255, 255, 0.13)'),
        pointerEvents: 'none'
      },
      '&$selected': {
        color: theme.palette.action.active,
        backgroundColor: 'rgba(0, 0, 0, 0.12)',
        '&:hover, &:focus': {
          backgroundColor: 'rgba(0, 0, 0, 0.15)'
        },
        '&$disabled': {
          color: theme.palette.action.disabled,
          backgroundColor: 'rgba(0, 0, 0, 0.06)'
        }
      }
    },

    /* Styles applied to the button element if `variant="text"` and `color="primary"`. */
    textPrimary: {
      '&:hover, &:focus': {
        color: theme.palette.primary.main,
        backgroundColor: 'rgba(0, 0, 0, 0.2)',
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: 'transparent'
        }
      },
      '&$selected': {
        color: theme.palette.primary.contrastText,
        backgroundColor: theme.palette.primary.main,
        '&:hover, &:focus': {
          backgroundColor: theme.palette.primary.dark,
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            backgroundColor: theme.palette.primary.main
          }
        },
        '&$disabled': {
          color: theme.palette.text.primary,
          backgroundColor: 'rgba(0, 0, 0, 0.07)'
        }
      }
    },

    /* Styles applied to the button element if `variant="text"` and `color="secondary"`. */
    textSecondary: {
      '&:hover, &:focus': {
        color: theme.palette.secondary.main,
        backgroundColor: 'rgba(0, 0, 0, 0.2)',
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: 'transparent'
        }
      },
      '&$selected': {
        color: theme.palette.secondary.contrastText,
        backgroundColor: theme.palette.secondary.main,
        '&:hover, &:focus': {
          backgroundColor: theme.palette.secondary.dark,
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            backgroundColor: theme.palette.secondary.main
          }
        },
        '&$disabled': {
          color: theme.palette.text.secondary,
          backgroundColor: 'rgba(0, 0, 0, 0.13)'
        }
      }
    },

    /* Styles applied to the button element if `variant="outlined"` and `color="primary"`. */
    outlinedPrimary: {
      '&:hover, &:focus': {
        color: theme.palette.primary.main,
        backgroundColor: fade(theme.palette.primary.main, 0.1),
        border: "1px solid ".concat(fade(theme.palette.primary.main, 0.2)),
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: 'transparent'
        }
      },
      '&$selected': {
        color: theme.palette.primary.main,
        border: "1px solid ".concat(fade(theme.palette.primary.main, 0.5)),
        backgroundColor: fade(theme.palette.primary.main, 0.15),
        '&:hover, &:focus': {
          backgroundColor: fade(theme.palette.primary.dark, 0.17),
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            backgroundColor: 'transparent'
          }
        }
      }
    },

    /* Styles applied to the button element if `variant="outlined"` and `color="secondary"`. */
    outlinedSecondary: {
      '&:hover, &:focus': {
        color: theme.palette.secondary.main,
        backgroundColor: fade(theme.palette.secondary.main, 0.1),
        border: "1px solid ".concat(fade(theme.palette.secondary.main, 0.2)),
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: 'transparent'
        }
      },
      '&$selected': {
        color: theme.palette.secondary.main,
        border: "1px solid ".concat(fade(theme.palette.secondary.main, 0.5)),
        backgroundColor: fade(theme.palette.secondary.main, 0.15),
        '&:hover, &:focus': {
          backgroundColor: fade(theme.palette.secondary.dark, 0.17),
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            backgroundColor: 'transparent'
          }
        }
      }
    },

    /* Styles applied to the button element if `rounded="true"`. */
    rounded: {
      borderRadius: theme.shape.borderRadius
    },

    /* Styles applied to the ellipsis element. */
    ellipsis: {
      fontSize: theme.typography.pxToRem(14),
      textAlign: 'center',
      width: 38,
      '&$disabled': {
        color: fade(theme.palette.text.primary, 0.5)
      },
      '&$sizeSmall': {
        fontSize: theme.typography.pxToRem(13),
        width: 28
      },
      '&$sizeLarge': {
        fontSize: theme.typography.pxToRem(15),
        width: 48
      }
    },

    /* Styles applied to the icon element. */
    icon: {
      fontSize: theme.typography.pxToRem(20),
      '&$sizeSmall': {
        fontSize: theme.typography.pxToRem(18),
        width: 28
      },
      '&$sizeLarge': {
        fontSize: theme.typography.pxToRem(22),
        width: 48
      }
    },

    /* Pseudo-class applied to the root element if `size="small"`. */
    sizeSmall: {},

    /* Pseudo-class applied to the root element if `size="large"`. */
    sizeLarge: {},

    /* Pseudo-class applied to the root element if `disabled={true}`. */
    disabled: {},

    /* Pseudo-class applied to the root element if `selected={true}`. */
    selected: {}
  };
};

function defaultGetAriaLabel(type, page, selected) {
  if (type === 'page') {
    return "".concat(selected ? '' : 'go to ', "page ").concat(page);
  }

  return "Go to ".concat(type, " page");
}

var PaginationItem = React.forwardRef(function PaginationItem(props, ref) {
  var classes = props.classes,
      className = props.className,
      _props$color = props.color,
      color = _props$color === void 0 ? 'standard' : _props$color,
      component = props.component,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      _props$getAriaLabel = props.getAriaLabel,
      getAriaLabel = _props$getAriaLabel === void 0 ? defaultGetAriaLabel : _props$getAriaLabel,
      page = props.page,
      handleClick = props.onClick,
      selected = props.selected,
      _props$shape = props.shape,
      shape = _props$shape === void 0 ? 'round' : _props$shape,
      _props$size = props.size,
      size = _props$size === void 0 ? 'medium' : _props$size,
      _props$type = props.type,
      type = _props$type === void 0 ? 'page' : _props$type,
      variant = props.variant,
      other = _objectWithoutProperties(props, ["classes", "className", "color", "component", "disabled", "getAriaLabel", "page", "onClick", "selected", "shape", "size", "type", "variant"]);

  return type === 'start-ellipsis' || type === 'end-ellipsis' ? React.createElement("div", {
    ref: ref,
    className: clsx(classes.ellipsis, disabled && classes.disabled, size !== 'medium' && classes["size".concat(capitalize(size))])
  }, "\u2026") : React.createElement(ButtonBase, _extends({
    ref: ref,
    component: component,
    disabled: disabled,
    "aria-label": getAriaLabel(type, page, selected),
    "aria-current": selected ? 'true' : undefined,
    onClick: function onClick(event) {
      return handleClick(event, page);
    },
    className: clsx(classes.root, classes[variant], classes[shape], className, color !== 'standard' && classes["".concat(variant).concat(capitalize(color))], disabled && classes.disabled, selected && classes.selected, size !== 'medium' && classes["size".concat(capitalize(size))])
  }, other), type === 'page' && page, type === 'previous' && React.createElement(NavigateBeforeIcon, {
    className: clsx(classes.icon, size !== 'medium' && classes["size".concat(capitalize(size))])
  }), type === 'next' && React.createElement(NavigateNextIcon, {
    className: clsx(classes.icon, size !== 'medium' && classes["size".concat(capitalize(size))])
  }), type === 'first' && React.createElement(FirstPageIcon, {
    className: clsx(classes.icon, size !== 'medium' && classes["size".concat(capitalize(size))])
  }), type === 'last' && React.createElement(LastPageIcon, {
    className: clsx(classes.icon, size !== 'medium' && classes["size".concat(capitalize(size))])
  }));
});
process.env.NODE_ENV !== "production" ? PaginationItem.propTypes = {
  /**
   * @ignore
   */
  classes: PropTypes.object.isRequired,

  /**
   * @ignore
   */
  className: PropTypes.string,

  /**
   * The active color.
   */
  color: PropTypes.oneOf(['standard', 'primary', 'secondary']),

  /**
   * The component used for the root node.
   * Either a string to use a DOM element or a component.
   */
  component: PropTypes.elementType,

  /**
   * If `true`, the item will be disabled.
   */
  disabled: PropTypes.bool,

  /**
   * Accepts a function which returns a string value that provides a user-friendly name for the current page.
   *
   * @param {string} [type = page] The link or button type to format ('page' | 'first' | 'last' | 'next' | 'previous').
   * @param {number} page The page number to format.
   * @param {bool} selected If true, the current page is selected.
   * @returns {string}
   */
  getAriaLabel: PropTypes.func,

  /**
   * Callback fired when the page is changed.
   *
   * @param {object} event The event source of the callback.
   * @param {number} page The page selected.
   */
  onClick: PropTypes.func,

  /**
   * The current page number.
   */
  page: PropTypes.number,

  /**
   * If `true` the pagination item is selected.
   */
  selected: PropTypes.bool,

  /**
   * The shape of the pagination item.
   */
  shape: PropTypes.oneOf(['round', 'rounded']),

  /**
   * The size of the pagination item.
   */
  size: PropTypes.oneOf(['small', 'medium', 'large']),

  /*
   * The type of pagination item.
   */
  type: PropTypes.oneOf(['page', 'first', 'last', 'next', 'previous', 'start-ellipsis', 'end-ellipsis']),

  /*
   * The pagination item variant.
   */
  variant: PropTypes.oneOf(['text', 'outlined'])
} : void 0;
export default withStyles(styles, {
  name: 'PaginationItem'
})(PaginationItem);