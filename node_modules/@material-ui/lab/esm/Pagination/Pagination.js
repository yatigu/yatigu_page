import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React from 'react';
import PropTypes from 'prop-types';
import clsx from 'clsx';
import { withStyles } from '@material-ui/core/styles';
import usePagination from './usePagination';
import PaginationItem from '../PaginationItem';
export var styles = {
  /* Styles applied to the root element. */
  root: {
    display: 'flex',
    flexWrap: 'wrap',
    alignItems: 'center',
    listStyle: 'none',
    padding: 0,
    // Reset
    margin: 0 // Reset

  }
};
var Pagination = React.forwardRef(function Pagination(props, ref) {
  var _usePagination = usePagination(_extends({}, props, {
    componentName: 'Pagination'
  })),
      children = _usePagination.children,
      classes = _usePagination.classes,
      className = _usePagination.className,
      _usePagination$color = _usePagination.color,
      color = _usePagination$color === void 0 ? 'standard' : _usePagination$color,
      getAriaLabel = _usePagination.getItemAriaLabel,
      items = _usePagination.items,
      _usePagination$render = _usePagination.renderItem,
      renderItem = _usePagination$render === void 0 ? function (item) {
    return React.createElement(PaginationItem, item);
  } : _usePagination$render,
      _usePagination$shape = _usePagination.shape,
      shape = _usePagination$shape === void 0 ? 'round' : _usePagination$shape,
      size = _usePagination.size,
      _usePagination$varian = _usePagination.variant,
      variant = _usePagination$varian === void 0 ? 'text' : _usePagination$varian,
      other = _objectWithoutProperties(_usePagination, ["children", "classes", "className", "color", "getItemAriaLabel", "items", "renderItem", "shape", "size", "variant"]);

  var itemProps = {
    color: color,
    getAriaLabel: getAriaLabel,
    shape: shape,
    size: size,
    variant: variant
  };
  return React.createElement("ul", _extends({
    role: "navigation",
    "aria-label": "pagination navigation",
    className: clsx(classes.root, className),
    ref: ref
  }, other), children || items.map(function (item) {
    return React.createElement("li", {
      key: item.type !== undefined ? item.type : item.page.toString()
    }, renderItem(_extends({}, item, {}, itemProps)));
  }));
});
process.env.NODE_ENV !== "production" ? Pagination.propTypes = {
  /**
   * Number of always visible pages at the beginning and end.
   */
  boundaryCount: PropTypes.number,

  /**
   * Pagination items.
   */
  children: PropTypes.node,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: PropTypes.object.isRequired,

  /**
   * @ignore
   */
  className: PropTypes.string,

  /**
   * The active color.
   */
  color: PropTypes.oneOf(['default', 'primary', 'secondary']),

  /**
   * The total number of pages.
   */
  count: PropTypes.number,

  /**
   * The page selected by default when the component is uncontrolled.
   */
  defaultPage: PropTypes.number,

  /**
   * If `true`, all the pagination component will be disabled.
   */
  disabled: PropTypes.bool,

  /**
   * Accepts a function which returns a string value that provides a user-friendly name for the current page.
   *
   * @param {string} [type = page] The link or button type to format ('page' | 'first' | 'last' | 'next' | 'previous').
   * @param {number} page The page number to format.
   * @param {bool} selected If true, the current page is selected.
   * @returns {string}
   */
  getItemAriaLabel: PropTypes.func,

  /**
   * If `true`, hide the next-page button.
   */
  hideNextButton: PropTypes.bool,

  /**
   * If `true`, hide the previous-page button.
   */
  hidePrevButton: PropTypes.bool,

  /**
   * Callback fired when the page is changed.
   *
   * @param {object} event The event source of the callback.
   * @param {number} page The page selected.
   */
  onChange: PropTypes.func,

  /**
   * The current page.
   */
  page: PropTypes.number,

  /**
   * Render the item.
   *
   * @param {object} params
   * @returns {ReactNode}
   */
  renderItem: PropTypes.func,

  /**
   * The shape of the pagination items.
   */
  shape: PropTypes.oneOf(['round', 'rounded']),

  /**
   * If `true`, show the first-page button.
   */
  showFirstButton: PropTypes.bool,

  /**
   * If `true`, show the last-page button.
   */
  showLastButton: PropTypes.bool,

  /**
   * Number of always visible pages before and after the current page.
   */
  siblingRange: PropTypes.number,

  /**
   * The size of the pagination component.
   */
  size: PropTypes.oneOf(['small', 'medium', 'large']),

  /**
   * The variant to use.
   */
  variant: PropTypes.oneOf(['text', 'outlined'])
} : void 0;
export default withStyles(styles, {
  name: 'MuiPagination'
})(Pagination);