"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.styles = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _clsx = _interopRequireDefault(require("clsx"));

var _styles = require("@material-ui/core/styles");

var _usePagination2 = _interopRequireDefault(require("./usePagination"));

var _PaginationItem = _interopRequireDefault(require("../PaginationItem"));

var styles = {
  /* Styles applied to the root element. */
  root: {
    display: 'flex',
    flexWrap: 'wrap',
    alignItems: 'center',
    listStyle: 'none',
    padding: 0,
    // Reset
    margin: 0 // Reset

  }
};
exports.styles = styles;

var Pagination = _react.default.forwardRef(function Pagination(props, ref) {
  var _usePagination = (0, _usePagination2.default)((0, _extends2.default)({}, props, {
    componentName: 'Pagination'
  })),
      children = _usePagination.children,
      classes = _usePagination.classes,
      className = _usePagination.className,
      _usePagination$color = _usePagination.color,
      color = _usePagination$color === void 0 ? 'standard' : _usePagination$color,
      getAriaLabel = _usePagination.getItemAriaLabel,
      items = _usePagination.items,
      _usePagination$render = _usePagination.renderItem,
      renderItem = _usePagination$render === void 0 ? function (item) {
    return _react.default.createElement(_PaginationItem.default, item);
  } : _usePagination$render,
      _usePagination$shape = _usePagination.shape,
      shape = _usePagination$shape === void 0 ? 'round' : _usePagination$shape,
      size = _usePagination.size,
      _usePagination$varian = _usePagination.variant,
      variant = _usePagination$varian === void 0 ? 'text' : _usePagination$varian,
      other = (0, _objectWithoutProperties2.default)(_usePagination, ["children", "classes", "className", "color", "getItemAriaLabel", "items", "renderItem", "shape", "size", "variant"]);

  var itemProps = {
    color: color,
    getAriaLabel: getAriaLabel,
    shape: shape,
    size: size,
    variant: variant
  };
  return _react.default.createElement("ul", (0, _extends2.default)({
    role: "navigation",
    "aria-label": "pagination navigation",
    className: (0, _clsx.default)(classes.root, className),
    ref: ref
  }, other), children || items.map(function (item) {
    return _react.default.createElement("li", {
      key: item.type !== undefined ? item.type : item.page.toString()
    }, renderItem((0, _extends2.default)({}, item, {}, itemProps)));
  }));
});

process.env.NODE_ENV !== "production" ? Pagination.propTypes = {
  /**
   * Number of always visible pages at the beginning and end.
   */
  boundaryCount: _propTypes.default.number,

  /**
   * Pagination items.
   */
  children: _propTypes.default.node,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: _propTypes.default.object.isRequired,

  /**
   * @ignore
   */
  className: _propTypes.default.string,

  /**
   * The active color.
   */
  color: _propTypes.default.oneOf(['default', 'primary', 'secondary']),

  /**
   * The total number of pages.
   */
  count: _propTypes.default.number,

  /**
   * The page selected by default when the component is uncontrolled.
   */
  defaultPage: _propTypes.default.number,

  /**
   * If `true`, all the pagination component will be disabled.
   */
  disabled: _propTypes.default.bool,

  /**
   * Accepts a function which returns a string value that provides a user-friendly name for the current page.
   *
   * @param {string} [type = page] The link or button type to format ('page' | 'first' | 'last' | 'next' | 'previous').
   * @param {number} page The page number to format.
   * @param {bool} selected If true, the current page is selected.
   * @returns {string}
   */
  getItemAriaLabel: _propTypes.default.func,

  /**
   * If `true`, hide the next-page button.
   */
  hideNextButton: _propTypes.default.bool,

  /**
   * If `true`, hide the previous-page button.
   */
  hidePrevButton: _propTypes.default.bool,

  /**
   * Callback fired when the page is changed.
   *
   * @param {object} event The event source of the callback.
   * @param {number} page The page selected.
   */
  onChange: _propTypes.default.func,

  /**
   * The current page.
   */
  page: _propTypes.default.number,

  /**
   * Render the item.
   *
   * @param {object} params
   * @returns {ReactNode}
   */
  renderItem: _propTypes.default.func,

  /**
   * The shape of the pagination items.
   */
  shape: _propTypes.default.oneOf(['round', 'rounded']),

  /**
   * If `true`, show the first-page button.
   */
  showFirstButton: _propTypes.default.bool,

  /**
   * If `true`, show the last-page button.
   */
  showLastButton: _propTypes.default.bool,

  /**
   * Number of always visible pages before and after the current page.
   */
  siblingRange: _propTypes.default.number,

  /**
   * The size of the pagination component.
   */
  size: _propTypes.default.oneOf(['small', 'medium', 'large']),

  /**
   * The variant to use.
   */
  variant: _propTypes.default.oneOf(['text', 'outlined'])
} : void 0;

var _default = (0, _styles.withStyles)(styles, {
  name: 'MuiPagination'
})(Pagination);

exports.default = _default;